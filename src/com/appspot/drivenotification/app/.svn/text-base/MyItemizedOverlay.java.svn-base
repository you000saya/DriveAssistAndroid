package com.google.android.gcm.demo.app;

import java.util.ArrayList;

import android.content.Context;
import android.graphics.drawable.Drawable;
import android.widget.Toast;

import com.google.android.maps.GeoPoint;
import com.google.android.maps.ItemizedOverlay;
import com.google.android.maps.OverlayItem;

//現在使っていません
public class MyItemizedOverlay extends ItemizedOverlay<OverlayItem> {
	private static final int NOT_GEOPOINT = -1;
	Context context;
	//マーカーの表示位置とメッセージを保持するオーバーレイクラスのリスト
	 private ArrayList<OverlayItem> items = new ArrayList<OverlayItem>();
	
	public MyItemizedOverlay(Drawable marker,Context context) {
		super(boundCenterBottom(marker));
		// TODO Auto-generated constructor stub
		this.context=context;
		populate();
	}

	@Override
	protected OverlayItem createItem(int i) {
		// TODO Auto-generated method stub
		return items.get(i);
	}

	@Override
	public int size() {
		// TODO Auto-generated method stub
		return items.size();
	}

	/**
    * 新しい位置を追加する。但し、同じ位置がリストに存在したら追加しない。
    * @param point 位置
    * @param markerText マーカーに付随する文字列
    * @param snippet 断片文字列
    */
   public void addNewItem(GeoPoint point, String markerText, String snippet) {
      if (getIndexGeoPoint(point) == NOT_GEOPOINT) {
         items.add(new OverlayItem(point, markerText, snippet));
         populate();
      }
   }
   // 位置が一致するか (一致しない場合は NOT_GEOPOINTを返却)
   //すでに同じ位置にマーカーがある場合は新規に登録するのではなく、情報のみを更新するため
   private int getIndexGeoPoint(GeoPoint newPoint) {
      int result = NOT_GEOPOINT;
      int size = items.size();
      for (int i = 0; i < size; i++) {
         OverlayItem item = items.get(i);
         GeoPoint point = item.getPoint();
         if (point.equals(newPoint)) {
            result = i;
            break;
         }
      }
      return result;
   }
   
   /**
    * 指定されたインデックスのマーカーを削除する。
    * @param index マーカー数より大きいインデックスが指定された場合は何もしない。
    */
   public void removeItem(int index) {
      if (index < size()) {
         items.remove(index);
         populate();
      }
   }

   /**
    * 指定された位置のマーカーを削除する。
    * @param point 同じ位置が存在すれば削除。
    */
   public void removeGeoPoint(GeoPoint point) {
      int idx = getIndexGeoPoint(point);
      if (idx != NOT_GEOPOINT) {
         removeItem(idx);
      }
   }
   
   public void clear() {
	      items.clear();
	      populate();
	   }

   // ユーザがマーカーをタップした時に親クラスから呼び出される
   // 今回は簡単なサンプルなのでテキストをトースト表示ようにした
   @Override
   protected boolean onTap(int index) {
      String markerText = items.get(index).getTitle();
      Toast.makeText(context, markerText, Toast.LENGTH_SHORT).show();
      return true;
   }

}
